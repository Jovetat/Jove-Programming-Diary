// vitepress-docs/.vitepress/config.mts
import { defineConfig } from "file:///D:/codeEX/Jove%20Programming%20Diary/node_modules/.pnpm/vitepress@1.5.0_@algolia+client-search@5.18.0_search-insights@2.17.3/node_modules/vitepress/dist/node/index.js";

// vitepress-docs/utils/auto_sidebar.js
import path from "node:path";
import fs from "node:fs";
var DIR_PATH = path.resolve();
var WHITE_LIST = ["index.md", ".vitepress", "node_modules", ".idea", "public"];
var isDirectory = (path2) => fs.lstatSync(path2).isDirectory();
var intersections = (arr1, arr2) => Array.from(new Set(arr1.filter((item) => !new Set(arr2).has(item))));
function getList(params, path1, pathname) {
  const res = [];
  for (let file in params) {
    const dir = path.join(path1, params[file]);
    const isDir = isDirectory(dir);
    if (isDir) {
      const files = fs.readdirSync(dir);
      res.push({
        text: params[file],
        collapsible: true,
        items: getList(files, dir, `${pathname}/${params[file]}`)
      });
    } else {
      const name = path.basename(params[file]);
      const suffix = path.extname(params[file]);
      if (suffix !== ".md") {
        continue;
      }
      res.push({
        text: name,
        link: `${pathname}/${name}`
      });
    }
  }
  res.map((item) => {
    item.text = item.text.replace(/\.md$/, "");
  });
  return res;
}
var set_sidebar = (pathname) => {
  const dirPath = path.join(DIR_PATH, pathname);
  const files = fs.readdirSync(dirPath);
  const items = intersections(files, WHITE_LIST);
  return getList(items, dirPath, pathname);
};

// vitepress-docs/.vitepress/config.mts
var config_default = defineConfig({
  title: "Jove docs",
  description: "Jove's daily learning record",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    logo: "../public/logo.png",
    nav: [
      { text: "\u9996\u9875", link: "/" },
      {
        text: "\u7B14\u8BB0",
        items: [
          { text: "vue", link: "/vue" },
          { text: "uniapp", link: "/uniapp" },
          { text: "js script", link: "/js-script" }
        ]
      }
    ],
    sidebar: [
      {
        text: "vue",
        items: set_sidebar("/vue")
      },
      {
        text: "uniapp",
        items: set_sidebar("/uniapp")
      },
      {
        text: "js script",
        items: set_sidebar("/js-script")
      }
    ],
    socialLinks: [{ icon: "github", link: "https://github.com/Jovetat" }],
    footer: {
      copyright: "Copyright \xA9 2022-present Jove"
    }
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
