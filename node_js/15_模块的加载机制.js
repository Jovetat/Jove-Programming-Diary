
/* 
    模块的加载机制
        模块在第一次加载后会被缓存，意味着多次调用 require() 不会导致模块代码被多次执行
        无论是内置模块、用户自定义模块、还是第三方模块，都会优先从缓存中加载，从而提高模块的加载效率
    
    内置模块的加载机制
        内置模块的加载优先级最高
    自定义模块的加载机制
        使用 require() 加载自定义模块时，必须指定以 ./ 或 ../ 开头的路径标识符
        在加载自定义模块时，如果没有指定 ./ 或 ../ 这样的路径标识符，node会把它当作内置模块或第三方模块进行加载
        require() 导入自定义模块时，如果省略文件的扩展名，Node.js 会按顺序分别加载一下的文件：
            1、确切的文件名
            2、补全 .js 扩展名
            3、补全 .json 扩展名
            4、补全 .node 扩展名(win32的执行程序，不可写 js 代码)
            5、加载失败
            
    第三方模块的加载机制
        传递给 require() 的模块标识符不是一个内置模块，也没有 ./ 或 ../ 开头
        则 Node.js 会从当前模块的父目录开始，尝试从 /node_moudels 文件夹中加载第三方模块
        (从父目录逐层向上找 node_moudels ，找到最外层还没找到则会报错)

    目录作为模块的加载机制([目录]作为模块标识符)
        1、被加载的目录下查找 package.json 文件，并寻找 main属性，作为 require() 记载的入口
        2、无 package.json 或 main 则 会加载目录下的 index.js 文件
        3、报错，模块缺失 Cannot find module 'xxx'

*/